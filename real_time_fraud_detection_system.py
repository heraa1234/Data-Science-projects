# -*- coding: utf-8 -*-
"""Real time Fraud Detection system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1l1oizSvb4njXCJHwZpq1mBcnaWg10gN-
"""

import pandas as pd
import numpy as np
from datetime import datetime, timedelta

# Simulate transaction data
def generate_transaction_data(num_samples=100000):
    np.random.seed(42)
    data = {
        "Transaction_ID": range(1, num_samples + 1),
        "User_ID": np.random.randint(1, 5000, num_samples),
        "Amount": np.random.exponential(scale=100, size=num_samples),
        "Merchant_Category": np.random.choice(['Electronics', 'Groceries', 'Travel', 'Clothing'], num_samples),
        "Timestamp": [datetime.now() - timedelta(minutes=np.random.randint(0, 100000)) for _ in range(num_samples)],
        "Fraud_Flag": np.random.choice([0, 1], num_samples, p=[0.95, 0.05])
    }
    return pd.DataFrame(data)

transactions = generate_transaction_data()
transactions.to_csv("transactions.csv", index=False)

import seaborn as sns
import matplotlib.pyplot as plt

# Plot fraud distribution
sns.countplot(data=transactions, x="Fraud_Flag")
plt.title("Fraud vs Non-Fraud Transactions")
plt.show()

# Visualize transaction amount by category
sns.boxplot(data=transactions, x="Merchant_Category", y="Amount", hue="Fraud_Flag")
plt.title("Transaction Amount Distribution by Merchant Category")
plt.show()

transactions['Hour_of_Day'] = transactions['Timestamp'].dt.hour
transactions['Transaction_Amount_Per_User'] = transactions.groupby('User_ID')['Amount'].transform('mean')

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, roc_auc_score

# Prepare the data
X = transactions[['Amount', 'Hour_of_Day', 'Transaction_Amount_Per_User']]
y = transactions['Fraud_Flag']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train a Random Forest model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))
print(f"ROC-AUC Score: {roc_auc_score(y_test, model.predict_proba(X_test)[:, 1]):.2f}")

def stream_transactions(batch_size=100):
    for i in range(0, len(transactions), batch_size):
        yield transactions.iloc[i:i+batch_size]

# Process the streaming data
for batch in stream_transactions():
    batch['Fraud_Prediction'] = model.predict(batch[['Amount', 'Hour_of_Day', 'Transaction_Amount_Per_User']])
    print(batch[['Transaction_ID', 'Fraud_Prediction']])

import plotly.express as px

fig = px.scatter(transactions, x='Amount', y='Hour_of_Day', color='Fraud_Flag',
                 title="Fraud Transactions by Amount and Time of Day")
fig.show()

