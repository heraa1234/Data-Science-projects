# -*- coding: utf-8 -*-
"""Heart disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Qa-vjH9y4lrUW0aabrajcFvGMyHWo_pf
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, roc_curve
import joblib

# Load Dataset
url = 'https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data'
column_names = ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal', 'target']
data = pd.read_csv(url, names=column_names)

# Data Cleaning
data.replace('?', np.nan, inplace=True)
data.dropna(inplace=True)

# Convert categorical to numerical
label_encoder = LabelEncoder()
data['sex'] = label_encoder.fit_transform(data['sex'])
data['cp'] = label_encoder.fit_transform(data['cp'])
data['fbs'] = label_encoder.fit_transform(data['fbs'])
data['restecg'] = label_encoder.fit_transform(data['restecg'])
data['exang'] = label_encoder.fit_transform(data['exang'])
data['slope'] = label_encoder.fit_transform(data['slope'])
data['ca'] = label_encoder.fit_transform(data['ca'])
data['thal'] = label_encoder.fit_transform(data['thal'])

# Features and target variable
X = data.drop('target', axis=1)
y = data['target']

# Train-test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Feature Scaling
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Train the model (Random Forest)
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Confirm that the classifier is for binary classification
print("Classes detected by the classifier:", model.classes_)

# Predictions
y_pred = model.predict(X_test)

# Model Evaluation
print(classification_report(y_test, y_pred))

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap='Blues')
plt.title('Confusion Matrix')
plt.show()

# Get predicted probabilities for class 1 (heart disease present)
y_pred_proba = model.predict_proba(X_test)[:, 1]

# Check the shape of predicted probabilities (should be (num_samples,))
print("Shape of predicted probabilities:", y_pred_proba.shape)  # (num_samples,)

# Verify that target y is binary
print("Unique target values:", y.unique())  # Should print [0, 1]

import sklearn
print(sklearn.__version__)

pip install --upgrade scikit-learn

import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, auc

# Convert y_test to a NumPy array if it's not already
y_test = np.array(y_test)  # Ensures compatibility with NumPy operations

# Ensure the target variable is numeric and has unique classes
unique_classes = np.unique(y_test)
n_classes = len(unique_classes)

# Get predicted probabilities for all classes
y_pred_proba = model.predict_proba(X_test)

# Initialize dictionaries to store ROC and AUC values
fpr = {}
tpr = {}
roc_auc = {}

# Compute ROC curve and AUC for each class
for i, cls in enumerate(unique_classes):
    # Create binary labels for the current class
    y_test_binary = (y_test == cls).astype(int)

    # Compute ROC curve and AUC for the current class
    fpr[cls], tpr[cls], _ = roc_curve(y_test_binary, y_pred_proba[:, i])
    roc_auc[cls] = auc(fpr[cls], tpr[cls])

# Compute micro-average ROC curve and AUC
fpr["micro"], tpr["micro"], _ = roc_curve(
    (y_test[:, None] == unique_classes).ravel(), y_pred_proba.ravel()
)
roc_auc["micro"] = auc(fpr["micro"], tpr["micro"])

# Plot ROC curve for micro-average
plt.figure(figsize=(8, 6))
plt.plot(fpr["micro"], tpr["micro"],
         label=f'micro-average ROC curve (area = {roc_auc["micro"]:.2f})',
         color='deeppink', linestyle=':', linewidth=4)

# Optionally plot ROC curves for individual classes
for cls in unique_classes:
    plt.plot(fpr[cls], tpr[cls], label=f'ROC curve of class {cls} (area = {roc_auc[cls]:.2f})')

plt.plot([0, 1], [0, 1], 'k--', lw=2)  # Diagonal line
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.legend(loc="lower right")
plt.show()

